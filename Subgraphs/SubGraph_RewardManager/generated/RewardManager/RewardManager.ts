// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CollectTrainingFees extends ethereum.Event {
  get params(): CollectTrainingFees__Params {
    return new CollectTrainingFees__Params(this);
  }
}

export class CollectTrainingFees__Params {
  _event: CollectTrainingFees;

  constructor(event: CollectTrainingFees) {
    this._event = event;
  }

  get instanceId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get numberOfEpochs(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewUserInstance extends ethereum.Event {
  get params(): NewUserInstance__Params {
    return new NewUserInstance__Params(this);
  }
}

export class NewUserInstance__Params {
  _event: NewUserInstance;

  constructor(event: NewUserInstance) {
    this._event = event;
  }

  get instanceId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get numberOfEpochs(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RewardManager__getUserInstanceResult {
  value0: Array<Address>;
  value1: BigInt;

  constructor(value0: Array<Address>, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): Array<Address> {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class RewardManager extends ethereum.SmartContract {
  static bind(address: Address): RewardManager {
    return new RewardManager("RewardManager", address);
  }

  FEE_PER_EPOCH(): BigInt {
    let result = super.call("FEE_PER_EPOCH", "FEE_PER_EPOCH():(uint256)", []);

    return result[0].toBigInt();
  }

  try_FEE_PER_EPOCH(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "FEE_PER_EPOCH",
      "FEE_PER_EPOCH():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PROTOCOL_FEE_PERCENTAGE(): BigInt {
    let result = super.call(
      "PROTOCOL_FEE_PERCENTAGE",
      "PROTOCOL_FEE_PERCENTAGE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PROTOCOL_FEE_PERCENTAGE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PROTOCOL_FEE_PERCENTAGE",
      "PROTOCOL_FEE_PERCENTAGE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  REWARD_TREASURY_ADDRESS(): Address {
    let result = super.call(
      "REWARD_TREASURY_ADDRESS",
      "REWARD_TREASURY_ADDRESS():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_REWARD_TREASURY_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "REWARD_TREASURY_ADDRESS",
      "REWARD_TREASURY_ADDRESS():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFeePerEpoch(): BigInt {
    let result = super.call("getFeePerEpoch", "getFeePerEpoch():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getFeePerEpoch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFeePerEpoch",
      "getFeePerEpoch():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProtocolFeePercentage(): BigInt {
    let result = super.call(
      "getProtocolFeePercentage",
      "getProtocolFeePercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getProtocolFeePercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProtocolFeePercentage",
      "getProtocolFeePercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRewardTreasuryAddress(): Address {
    let result = super.call(
      "getRewardTreasuryAddress",
      "getRewardTreasuryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getRewardTreasuryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRewardTreasuryAddress",
      "getRewardTreasuryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getUserInstance(_instanceId: BigInt): RewardManager__getUserInstanceResult {
    let result = super.call(
      "getUserInstance",
      "getUserInstance(uint256):(address[],uint256)",
      [ethereum.Value.fromUnsignedBigInt(_instanceId)]
    );

    return new RewardManager__getUserInstanceResult(
      result[0].toAddressArray(),
      result[1].toBigInt()
    );
  }

  try_getUserInstance(
    _instanceId: BigInt
  ): ethereum.CallResult<RewardManager__getUserInstanceResult> {
    let result = super.tryCall(
      "getUserInstance",
      "getUserInstance(uint256):(address[],uint256)",
      [ethereum.Value.fromUnsignedBigInt(_instanceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RewardManager__getUserInstanceResult(
        value[0].toAddressArray(),
        value[1].toBigInt()
      )
    );
  }

  idToUserInstance(param0: BigInt): BigInt {
    let result = super.call(
      "idToUserInstance",
      "idToUserInstance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_idToUserInstance(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "idToUserInstance",
      "idToUserInstance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  newUserInstance(
    _clientAddress: Array<Address>,
    _numberOfEpochs: BigInt
  ): BigInt {
    let result = super.call(
      "newUserInstance",
      "newUserInstance(address[],uint256):(uint256)",
      [
        ethereum.Value.fromAddressArray(_clientAddress),
        ethereum.Value.fromUnsignedBigInt(_numberOfEpochs)
      ]
    );

    return result[0].toBigInt();
  }

  try_newUserInstance(
    _clientAddress: Array<Address>,
    _numberOfEpochs: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "newUserInstance",
      "newUserInstance(address[],uint256):(uint256)",
      [
        ethereum.Value.fromAddressArray(_clientAddress),
        ethereum.Value.fromUnsignedBigInt(_numberOfEpochs)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nonce(): BigInt {
    let result = super.call("nonce", "nonce():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nonce(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonce", "nonce():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _rewardTreasuryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _feePerEpoch(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _protocolFeePercentage(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CollectTrainingFeesCall extends ethereum.Call {
  get inputs(): CollectTrainingFeesCall__Inputs {
    return new CollectTrainingFeesCall__Inputs(this);
  }

  get outputs(): CollectTrainingFeesCall__Outputs {
    return new CollectTrainingFeesCall__Outputs(this);
  }
}

export class CollectTrainingFeesCall__Inputs {
  _call: CollectTrainingFeesCall;

  constructor(call: CollectTrainingFeesCall) {
    this._call = call;
  }

  get _instanceId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CollectTrainingFeesCall__Outputs {
  _call: CollectTrainingFeesCall;

  constructor(call: CollectTrainingFeesCall) {
    this._call = call;
  }
}

export class NewUserInstanceCall extends ethereum.Call {
  get inputs(): NewUserInstanceCall__Inputs {
    return new NewUserInstanceCall__Inputs(this);
  }

  get outputs(): NewUserInstanceCall__Outputs {
    return new NewUserInstanceCall__Outputs(this);
  }
}

export class NewUserInstanceCall__Inputs {
  _call: NewUserInstanceCall;

  constructor(call: NewUserInstanceCall) {
    this._call = call;
  }

  get _clientAddress(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _numberOfEpochs(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class NewUserInstanceCall__Outputs {
  _call: NewUserInstanceCall;

  constructor(call: NewUserInstanceCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
