// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class SlashStake extends ethereum.Event {
  get params(): SlashStake__Params {
    return new SlashStake__Params(this);
  }
}

export class SlashStake__Params {
  _event: SlashStake;

  constructor(event: SlashStake) {
    this._event = event;
  }

  get client(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Stake extends ethereum.Event {
  get params(): Stake__Params {
    return new Stake__Params(this);
  }
}

export class Stake__Params {
  _event: Stake;

  constructor(event: Stake) {
    this._event = event;
  }

  get client(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unregister extends ethereum.Event {
  get params(): Unregister__Params {
    return new Unregister__Params(this);
  }
}

export class Unregister__Params {
  _event: Unregister;

  constructor(event: Unregister) {
    this._event = event;
  }

  get client(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class WithdrawStake extends ethereum.Event {
  get params(): WithdrawStake__Params {
    return new WithdrawStake__Params(this);
  }
}

export class WithdrawStake__Params {
  _event: WithdrawStake;

  constructor(event: WithdrawStake) {
    this._event = event;
  }

  get client(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class StakingRegistry extends ethereum.SmartContract {
  static bind(address: Address): StakingRegistry {
    return new StakingRegistry("StakingRegistry", address);
  }

  SLASHING_MANAGER(): Address {
    let result = super.call(
      "SLASHING_MANAGER",
      "SLASHING_MANAGER():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_SLASHING_MANAGER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "SLASHING_MANAGER",
      "SLASHING_MANAGER():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  SLASH_TREASURY_ADDRESS(): Address {
    let result = super.call(
      "SLASH_TREASURY_ADDRESS",
      "SLASH_TREASURY_ADDRESS():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_SLASH_TREASURY_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "SLASH_TREASURY_ADDRESS",
      "SLASH_TREASURY_ADDRESS():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  STAKE_AMOUNT(): BigInt {
    let result = super.call("STAKE_AMOUNT", "STAKE_AMOUNT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_STAKE_AMOUNT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("STAKE_AMOUNT", "STAKE_AMOUNT():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  STAKING_PERIOD(): BigInt {
    let result = super.call("STAKING_PERIOD", "STAKING_PERIOD():(uint256)", []);

    return result[0].toBigInt();
  }

  try_STAKING_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "STAKING_PERIOD",
      "STAKING_PERIOD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  clientStakes(param0: Address): BigInt {
    let result = super.call("clientStakes", "clientStakes(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_clientStakes(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "clientStakes",
      "clientStakes(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClientStake(_clientAddress: Address): BigInt {
    let result = super.call(
      "getClientStake",
      "getClientStake(address):(uint256)",
      [ethereum.Value.fromAddress(_clientAddress)]
    );

    return result[0].toBigInt();
  }

  try_getClientStake(_clientAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getClientStake",
      "getClientStake(address):(uint256)",
      [ethereum.Value.fromAddress(_clientAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getIsSlashed(_clientAddress: Address): boolean {
    let result = super.call("getIsSlashed", "getIsSlashed(address):(bool)", [
      ethereum.Value.fromAddress(_clientAddress)
    ]);

    return result[0].toBoolean();
  }

  try_getIsSlashed(_clientAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("getIsSlashed", "getIsSlashed(address):(bool)", [
      ethereum.Value.fromAddress(_clientAddress)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getIsStaked(_clientAddress: Address): boolean {
    let result = super.call("getIsStaked", "getIsStaked(address):(bool)", [
      ethereum.Value.fromAddress(_clientAddress)
    ]);

    return result[0].toBoolean();
  }

  try_getIsStaked(_clientAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("getIsStaked", "getIsStaked(address):(bool)", [
      ethereum.Value.fromAddress(_clientAddress)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getSlashTreasuryAddress(): Address {
    let result = super.call(
      "getSlashTreasuryAddress",
      "getSlashTreasuryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getSlashTreasuryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSlashTreasuryAddress",
      "getSlashTreasuryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSlashingManagerAddress(): Address {
    let result = super.call(
      "getSlashingManagerAddress",
      "getSlashingManagerAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getSlashingManagerAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSlashingManagerAddress",
      "getSlashingManagerAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getStakeAmount(): BigInt {
    let result = super.call("getStakeAmount", "getStakeAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getStakeAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStakeAmount",
      "getStakeAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakingPeriod(): BigInt {
    let result = super.call(
      "getStakingPeriod",
      "getStakingPeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getStakingPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStakingPeriod",
      "getStakingPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWithdrawlTimelock(_clientAddress: Address): BigInt {
    let result = super.call(
      "getWithdrawlTimelock",
      "getWithdrawlTimelock(address):(uint256)",
      [ethereum.Value.fromAddress(_clientAddress)]
    );

    return result[0].toBigInt();
  }

  try_getWithdrawlTimelock(
    _clientAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getWithdrawlTimelock",
      "getWithdrawlTimelock(address):(uint256)",
      [ethereum.Value.fromAddress(_clientAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isSlashed(param0: Address): boolean {
    let result = super.call("isSlashed", "isSlashed(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isSlashed(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isSlashed", "isSlashed(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isStaked(param0: Address): boolean {
    let result = super.call("isStaked", "isStaked(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isStaked(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isStaked", "isStaked(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawlTimelock(param0: Address): BigInt {
    let result = super.call(
      "withdrawlTimelock",
      "withdrawlTimelock(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_withdrawlTimelock(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawlTimelock",
      "withdrawlTimelock(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _stakeAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _stakingPeriod(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _slashingManager(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _slashTreasuryAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class SlashStakeCall extends ethereum.Call {
  get inputs(): SlashStakeCall__Inputs {
    return new SlashStakeCall__Inputs(this);
  }

  get outputs(): SlashStakeCall__Outputs {
    return new SlashStakeCall__Outputs(this);
  }
}

export class SlashStakeCall__Inputs {
  _call: SlashStakeCall;

  constructor(call: SlashStakeCall) {
    this._call = call;
  }

  get _clientAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SlashStakeCall__Outputs {
  _call: SlashStakeCall;

  constructor(call: SlashStakeCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class UnRegisterCall extends ethereum.Call {
  get inputs(): UnRegisterCall__Inputs {
    return new UnRegisterCall__Inputs(this);
  }

  get outputs(): UnRegisterCall__Outputs {
    return new UnRegisterCall__Outputs(this);
  }
}

export class UnRegisterCall__Inputs {
  _call: UnRegisterCall;

  constructor(call: UnRegisterCall) {
    this._call = call;
  }
}

export class UnRegisterCall__Outputs {
  _call: UnRegisterCall;

  constructor(call: UnRegisterCall) {
    this._call = call;
  }
}

export class WithdrawStakeCall extends ethereum.Call {
  get inputs(): WithdrawStakeCall__Inputs {
    return new WithdrawStakeCall__Inputs(this);
  }

  get outputs(): WithdrawStakeCall__Outputs {
    return new WithdrawStakeCall__Outputs(this);
  }
}

export class WithdrawStakeCall__Inputs {
  _call: WithdrawStakeCall;

  constructor(call: WithdrawStakeCall) {
    this._call = call;
  }
}

export class WithdrawStakeCall__Outputs {
  _call: WithdrawStakeCall;

  constructor(call: WithdrawStakeCall) {
    this._call = call;
  }
}
