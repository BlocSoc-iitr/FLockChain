"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const immutable_1 = __importDefault(require("immutable"));
const file_template_1 = __importDefault(require("../protocols/file_template"));
const tsCodegen = __importStar(require("./typescript"));
class DataSourceTemplateCodeGenerator {
    constructor(template, protocol) {
        this.template = template;
        this.template = template;
        const kind = template.get('kind');
        if (kind.split('/')[0] == protocol.name) {
            this.protocolTemplateCodeGen = protocol.getTemplateCodeGen(template);
        }
        else if (kind == 'file/ipfs' || kind == 'file/arweave') {
            this.protocolTemplateCodeGen = new file_template_1.default(template);
        }
        else {
            throw new Error(`DataSourceTemplate kind not supported: ${kind}`);
        }
    }
    generateModuleImports() {
        return [
            tsCodegen.moduleImports([
                ...this.protocolTemplateCodeGen.generateModuleImports(),
                'DataSourceTemplate',
                'DataSourceContext',
            ], '@graphprotocol/graph-ts'),
        ];
    }
    generateTypes() {
        return immutable_1.default.List([this._generateTemplateType()]);
    }
    _generateTemplateType() {
        const name = this.template.get('name');
        const klass = tsCodegen.klass(name, {
            export: true,
            extends: 'DataSourceTemplate',
        });
        klass.addMethod(this.protocolTemplateCodeGen.generateCreateMethod());
        klass.addMethod(this.protocolTemplateCodeGen.generateCreateWithContextMethod());
        return klass;
    }
}
exports.default = DataSourceTemplateCodeGenerator;
